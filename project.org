* Backward Euler
** DONE Entender la parte de los signos de la matriz de la ecuación y la matriz de derivadas df_dx_s
- La h² que multiplicaba a los factores de la matriz de derivadas ya tenía un signo negativo incorporado.
    #+begin_src c++
    double h2 = - h * h
    #+end_src
** DONE Muelles de flexión
- Los muelles de flexión tienen una /stiffness/ de $K_\text{flexión} = \frac{K_\text{tensión}}{100}$
** DONE Añadir sistema de aristas para crear la cuadricula y para añadir muelles de flexión
** DONE Triangular
** DONE Fijación
** DONE Test dejando valancear la tela
** DONE Arreglar diferéncias finitas
** DONE Pulir diferenciabilidad
Observaciones:
- En el caso sencillo de un sólo muelle, backpropagation funciona con un sólo step y se distancia cada vez más a medida que augmentas el número de steps.
- En el caso no lineal backpropagation no coincide con diferéncias finitas ni en el caso de un sólo step.
- La segundada iteración de Newton parece que no aporta mucho. Mejora un poco el resultado del caso no lineal pero es casi despreciable.
** DONE Hacer que se pueda simular sin render
** TODO Probar diferenciabilidad con más de un parámetro:
*** DONE Probar con 2 parámetros (muelles de tracción y flexión)
CLOSED: [2023-06-26 dl. 20:15]
*** DONE Probar con N parámetros (cada K de cada muelle se trata cómo un parámetro distinto)
CLOSED: [2023-06-26 dl. 20:15]
*** TODO Hacer que los parámetros se definan de forma continua interpolando
- [X] Interpolar parámetros.
- [ ] Implementar el bucle de gradient decent con esto nuevo.
